// This file is auto-generated. Do not edit.
var examples={"addup-aliased.js":"// Each method of a Clumpy instance is tied to that instance\n// regardless of whether the method is invoked as a method of\n// the instance or a free-standing function, so we can detach\n// them and they'll still behave as intended.\nvar clumpy = new Clumpy(),\n\tFOR = clumpy.for_loop,\n\tTHEN = clumpy.then,\n\tSET = clumpy.set;\n\n// Add up all the numbers from 1 to n.\nfunction addup(n, callback) {\n\tvar i = 0, sum = 0;\n\t\n\tSET({\n\t\tbetween: function () {\n\t\t\tconsole.log(Math.floor((i / n) * 100) + '% done: ' + sum);\n\t\t}\n\t});\n\tFOR(\n\t\tfunction () { i = 1; },\n\t\tfunction () { return i <= n; },\n\t\tfunction () { i++; },\n\t\tfunction () {\n\t\t\tsum += i;\n\t\t}\n\t);\n\tTHEN(function () {\n\t\tcallback(sum);\n\t});\n}\n\nvar n = 4567890;\naddup(n, function (result) {\n\tvar expected = n * (n + 1) / 2;\n\tconsole.log('expected: ' + expected);\n\tconsole.log('result: ' + result);\n\tconsole.log(\n\t\tresult === expected ?\n\t\t\t'success!' :\n\t\t\t'something went wrong.'\n\t);\n});","addup.js":"// Add up all the numbers from 1 to n.\nfunction addup(n, callback) {\n\tvar i,\n\t\tsum = 0,\n\t\tclumpy = new Clumpy({\n\t\t\tbetween: function () {\n\t\t\t\tconsole.log(Math.floor((i / n) * 100) + '% done: ' + sum);\n\t\t\t}\n\t\t});\n\t(clumpy\n\t\t.for_loop(\n\t\t\tfunction () { i = 1; },\n\t\t\tfunction () { return i <= n; },\n\t\t\tfunction () { i++; },\n\t\t\tfunction () {\n\t\t\t\tsum += i;\n\t\t\t}\n\t\t)\n\t\t.then(function () {\n\t\t\tcallback(sum);\n\t\t})\n\t);\n}\n\nvar n = 4567890;\naddup(n, function (result) {\n\tvar expected = n * (n + 1) / 2;\n\tconsole.log('expected: ' + expected);\n\tconsole.log('result: ' + result);\n\tconsole.log(\n\t\tresult === expected ?\n\t\t\t'success!' :\n\t\t\t'something went wrong.'\n\t);\n});"};