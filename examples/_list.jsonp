// This file is auto-generated. Do not edit.
var examples={"addup-aliased.js":"// Each method of a Clumpy instance is tied to that instance\n// regardless of whether the method is invoked as a method of\n// the instance or a free-standing function, so we can detach\n// them and they'll still behave as intended.\nvar clumpy = new Clumpy(),\n\tFOR = clumpy.for_loop,\n\tTHEN = clumpy.then,\n\tSET = clumpy.set;\n\n// Add up all the numbers from 1 to n.\nfunction addup(n, callback) {\n\tvar i = 0, sum = 0;\n\t\n\tSET({\n\t\tbetween: function () {\n\t\t\tconsole.log(Math.floor((i / n) * 100) + '% done: ' + sum);\n\t\t}\n\t});\n\tFOR(\n\t\tfunction () { i = 1; },\n\t\tfunction () { return i <= n; },\n\t\tfunction () { i++; },\n\t\tfunction () {\n\t\t\tsum += i;\n\t\t}\n\t);\n\tTHEN(function () {\n\t\tcallback(sum);\n\t});\n}\n\nvar n = 4567890;\naddup(n, function (result) {\n\tvar expected = n * (n + 1) / 2;\n\tconsole.log('expected: ' + expected);\n\tconsole.log('result: ' + result);\n\tconsole.log(\n\t\tresult === expected ?\n\t\t\t'success!' :\n\t\t\t'something went wrong.'\n\t);\n});","addup-interrupt.js":"// Add up all the numbers from 1 to n.\nfunction addup(n, callback) {\n\tvar i,\n\t\tcount = 0,\n\t\tsum = 0,\n\t\tclumpy = new Clumpy();\n\t\t\n\t(clumpy\n\t\t.set({\n\t\t\tbetween: ()=> {\n\t\t\t\tcount++;\n\t\t\t\tconsole.log(\n\t\t\t\t\t'between: sum is ' + sum +\n\t\t\t\t\t', increased count to ' + count\n\t\t\t\t);\n\t\t\t}\n\t\t})\n\t\t.for_loop(\n\t\t\t() => i = 1,\n\t\t\t() => i <= n,\n\t\t\t() => i++,\n\t\t\t() => {\n\t\t\t\tsum += i;\n\t\t\t\tif (i % 10 === 0) {\n\t\t\t\t\tclumpy.interrupt();\n\t\t\t\t}\n\t\t\t}\n\t\t)\n\t\t.then(() => {\n\t\t\tvar expected = n * (n + 1) / 2;\n\t\t\tconsole.log('expected: ' + expected);\n\t\t\tconsole.log('sum: ' + sum);\n\t\t\tcallback();\n\t\t})\n\t);\n\n}\n\n\naddup(99, function () {\n\tconsole.log('done');\n});","addup-promise.js":"// Use Clumpy to deliver on a Promise.\nfunction addUpPromise(n) {\n\treturn new Promise(function(resolve, reject) {\n\t\t// Create an instance for each Promise, so that multiples can run at once.\n\t\tvar i,\n\t\t\tsum = 0,\n\t\t\tclumpy = new Clumpy();\n\t\t\t\n\t\t(clumpy\n\t\t\t.for_loop(\n\t\t\t\tfunction () { i = 1; },\n\t\t\t\tfunction () { return i <= n; },\n\t\t\t\tfunction () { i++; },\n\t\t\t\tfunction () {\n\t\t\t\t\t// Reject if i is 1300000 or greater.\n\t\t\t\t\t// (It's silly to check this here instead of before\n\t\t\t\t\t// the loop starts, but it's just an example.)\n\t\t\t\t\tif (i === 1300000) {\n\t\t\t\t\t\t// Reset the instance to keep it from running out of control.\n\t\t\t\t\t\tclumpy.clear();\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Reject the Promise.\n\t\t\t\t\t\treject(Error('You must have tried an unlucky number.'));\n\t\t\t\t\t}\n\t\t\t\t\tsum += i;\n\t\t\t\t}\n\t\t\t)\n\t\t\t.then(function () {\n\t\t\t\tvar expected = n * (n + 1) / 2;\n\t\t\t\tif (sum === expected) {\n\t\t\t\t\tresolve(sum);\n\t\t\t\t} else {\n\t\t\t\t\treject(Error('Expected ' + expected + ' but got ' + sum));\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t});\n}\n\n// Provide some output regarding addUpPromise calls.\nfunction handleAddupResults(n) {\n\tconsole.log('Starting to add up numbers from 1 to ' + n + '...');\n\taddUpPromise(n).then(\n\t\tfunction (result) {\n\t\t\tconsole.log('Success adding up to ' + n + ': ' + result);\n\t\t},\n\t\tfunction (err) {\n\t\t\tconsole.log('Failure adding up to ' + n + ': ' + err);\n\t\t}\n\t);\n}\n\n// The results will arrive in the console in a different order from how they\n// were started, because they're asynchronous and their execution takes \n// different amounts of time.\n\n// Success\nhandleAddupResults(987654);\nhandleAddupResults(654321);\n\n// Error because it exceeds 1300000\nhandleAddupResults(2000000);\n\n// Error because it's a string and the expected value is mis-calculated.\nhandleAddupResults('123456');","addup-sleep.js":"// Add up all the numbers from 1 to n.\nfunction addup(n, callback) {\n\tvar i,\n\t\tsum = 0,\n\t\tclumpy = new Clumpy();\n\n\tfunction now() {\n\t\treturn new Date().getTime();\n\t}\n\n\t(clumpy\n\t\t.for_loop(\n\t\t\t()=> i = 1,\n\t\t\t()=> i <= n,\n\t\t\t()=> i++,\n\t\t\t()=> {\n\t\t\t\tvar start = now();\n\t\t\t\tclumpy.sleep(500).then(()=> {\n\t\t\t\t\tsum += i;\n\t\t\t\t\tconsole.log((now() - start) + 'ms elapsed');\n\t\t\t\t});\n\t\t\t\n\t\t\t}\n\t\t)\n\t\t.then(()=> {\n\t\t\tvar expected = n * (n + 1) / 2;\n\t\t\tconsole.log('expected: ' + expected);\n\t\t\tconsole.log('sum: ' + sum);\n\t\t\tcallback();\n\t\t})\n\t);\n\n}\n\n\naddup(10, function () {\n\tconsole.log('done');\n});","addup-wait.js":"// Add up all the numbers from 1 to n.\nfunction addup(n, callback) {\n\t/*global setTimeout */\n\tvar i,\n\t\tms = 100,\n\t\tsum = 0,\n\t\tclumpy = new Clumpy();\n\n\tfunction asyncAddition(a, b, callback) {\n\t\tsetTimeout(()=> {\n\t\t\tcallback(a + b);\n\t\t}, ms);\n\t}\n\n\t(clumpy\n\t\t.for_loop(\n\t\t\t()=> i = 1,\n\t\t\t()=> i <= n,\n\t\t\t()=> i++,\n\t\t\t()=> {\n\t\t\t\tclumpy.wait((done)=> {\n\t\t\t\t\tasyncAddition(sum, i, (result)=> {\n\t\t\t\t\t\tsum = result;\n\t\t\t\t\t\tconsole.log('sum so far: ' + sum);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t)\n\t\t.then(()=> {\n\t\t\tvar expected = n * (n + 1) / 2;\n\t\t\tconsole.log('expected: ' + expected);\n\t\t\tconsole.log('sum: ' + sum);\n\t\t\tcallback();\n\t\t})\n\t);\n}\n\n\naddup(10, function () {\n\tconsole.log('done');\n});","addup.js":"// Add up all the numbers from 1 to n.\nfunction addup(n, callback) {\n\tvar i,\n\t\tsum = 0,\n\t\tclumpy = new Clumpy({\n\t\t\tbetween: function () {\n\t\t\t\tconsole.log(Math.floor((i / n) * 100) + '% done: ' + sum);\n\t\t\t}\n\t\t});\n\t(clumpy\n\t\t.for_loop(\n\t\t\tfunction () { i = 1; },\n\t\t\tfunction () { return i <= n; },\n\t\t\tfunction () { i++; },\n\t\t\tfunction () {\n\t\t\t\tsum += i;\n\t\t\t}\n\t\t)\n\t\t.then(function () {\n\t\t\tcallback(sum);\n\t\t})\n\t);\n}\n\nvar n = 4567890;\naddup(n, function (result) {\n\tvar expected = n * (n + 1) / 2;\n\tconsole.log('expected: ' + expected);\n\tconsole.log('result: ' + result);\n\tconsole.log(\n\t\tresult === expected ?\n\t\t\t'success!' :\n\t\t\t'something went wrong.'\n\t);\n});"};